#!/bin/bash

# List open PRs for a repository
# Uses GitHub CLI and respects sidekick environment variables

# Source config library for git detection
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
if [[ -f "$SCRIPT_DIR/lib/config.sh" ]]; then
    source "$SCRIPT_DIR/lib/config.sh"
    # Load config silently
    load_sidekick_config true
else
    # Fallback to environment variables only
    DEFAULT_GITHUB_ORG="${SIDEKICK_GITHUB_ORG:-}"
    DEFAULT_GITHUB_REPO="${SIDEKICK_GITHUB_REPO:-}"
    get_github_org_or_user() { echo "$DEFAULT_GITHUB_ORG"; }
    get_github_repo() { echo "$DEFAULT_GITHUB_REPO"; }
fi

# Parse arguments
LIMIT=10
STATE="open"
ORG=""
REPO=""
JSON_OUTPUT=false
JSON_ONLY=false

usage() {
    cat << EOF
Usage: sidekick list-prs [options] [org] [repo]

List pull requests for a GitHub repository.

Options:
    -l, --limit NUM    Number of PRs to show (default: 10)
    -s, --state STATE  PR state: open, closed, all (default: open)
    -j, --json         Output in JSON format
    --json-only        Output only JSON, no decorative text
    -h, --help         Show this help message

Arguments:
    org     GitHub organization (uses SIDEKICK_GITHUB_ORG if not provided)
    repo    GitHub repository (uses SIDEKICK_GITHUB_REPO if not provided)

Examples:
    sidekick list-prs                    # Use environment defaults
    sidekick list-prs facebook react     # Specific repo
    sidekick list-prs -l 20 -s all      # Show 20 PRs, all states
    sidekick list-prs -j                 # Output as JSON
    sidekick list-prs --json-only       # Clean JSON output

Environment:
    SIDEKICK_GITHUB_ORG     Default organization
    SIDEKICK_GITHUB_REPO    Default repository
EOF
}

# Parse options
while [[ $# -gt 0 ]]; do
    case $1 in
        -l|--limit)
            LIMIT="$2"
            shift 2
            ;;
        -s|--state)
            STATE="$2"
            shift 2
            ;;
        -j|--json)
            JSON_OUTPUT=true
            shift
            ;;
        --json-only)
            JSON_OUTPUT=true
            JSON_ONLY=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
        *)
            # Positional arguments
            if [[ -z "$ORG" ]]; then
                ORG="$1"
            elif [[ -z "$REPO" ]]; then
                REPO="$1"
            else
                echo "Too many arguments"
                usage
                exit 1
            fi
            shift
            ;;
    esac
done

# Use environment defaults or git detection if not specified
ORG="${ORG:-$(get_github_org_or_user)}"
REPO="${REPO:-$(get_github_repo)}"

# Validate we have required info
if [[ -z "$ORG" ]] || [[ -z "$REPO" ]]; then
    echo "Error: Organization and repository are required"
    echo "Provide them as arguments, set SIDEKICK_GITHUB_ORG and SIDEKICK_GITHUB_REPO,"
    echo "or run from a git repository"
    exit 1
fi

# Check gh authentication
if ! gh auth status >/dev/null 2>&1; then
    echo "Error: Not authenticated with GitHub"
    echo "Run: gh auth login"
    exit 1
fi

# Fetch PRs
if [[ "$JSON_OUTPUT" == "true" ]]; then
    # JSON output mode
    if [[ "$JSON_ONLY" != "true" ]]; then
        echo "📋 Fetching Pull Requests for $ORG/$REPO..." >&2
    fi
    
    # Fetch as JSON with available fields
    pr_json=$(gh pr list \
        --repo "$ORG/$REPO" \
        --state "$STATE" \
        --limit "$LIMIT" \
        --json number,title,author,state,createdAt,updatedAt,url,headRefName,baseRefName,isDraft,labels,assignees,body 2>&1)
    
    if [[ $? -ne 0 ]]; then
        if [[ "$JSON_ONLY" == "true" ]]; then
            echo '{"error": "Failed to fetch PRs"}' 
        else
            echo "Failed to fetch PRs. Check that the repository exists and you have access." >&2
        fi
        exit 1
    fi
    
    # Add metadata
    pr_count=$(echo "$pr_json" | jq 'length')
    
    # Build complete JSON output
    output_json=$(jq -n \
        --arg org "$ORG" \
        --arg repo "$REPO" \
        --arg state "$STATE" \
        --arg limit "$LIMIT" \
        --arg count "$pr_count" \
        --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
        --argjson prs "$pr_json" \
        '{
            repository: {
                organization: $org,
                name: $repo
            },
            query: {
                state: $state,
                limit: ($limit | tonumber),
                returned: ($count | tonumber)
            },
            pull_requests: $prs,
            metadata: {
                fetched_at: $timestamp
            }
        }')
    
    echo "$output_json"
    
    if [[ "$JSON_ONLY" != "true" ]]; then
        echo "" >&2
        echo "✓ Found $pr_count pull requests" >&2
    fi
else
    # Traditional table output
    echo "📋 Pull Requests for $ORG/$REPO (state: $STATE, limit: $LIMIT)"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    
    # Fetch and display PRs
    gh pr list \
        --repo "$ORG/$REPO" \
        --state "$STATE" \
        --limit "$LIMIT"
    
    if [[ $? -ne 0 ]]; then
        echo ""
        echo "Failed to fetch PRs. Check that the repository exists and you have access."
        exit 1
    fi
fi